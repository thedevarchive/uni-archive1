public class BTreeNode
{
  public static int ORDER = 5;
  public static int ARRAY_SIZE = 3 * ORDER - 1;
  private static int START_KEY_INDEX = 2;
  private static int KEY_INCREMENT = 3;
  public static long NO_KEY_FOUND = -1L;
  public static long NULL = -1L;
  private long[] elements;
  
  BTreeNode(long[] paramArrayOfLong) {
    elements = paramArrayOfLong;
  }
  

  public long getValueIndex(long paramLong)
  {
    for (int i = START_KEY_INDEX; i < ARRAY_SIZE; i += KEY_INCREMENT) {
      if (paramLong == elements[i]) {
        return elements[(i + 1)];
      }
    }
    return NO_KEY_FOUND;
  }
  
  public boolean isFull() {
    return elements[(ARRAY_SIZE - 2)] != NULL;
  }
  
  public void insert(long paramLong1, long paramLong2) {
    for (int i = START_KEY_INDEX; i < ARRAY_SIZE; i += KEY_INCREMENT) {
      long l1 = elements[i];
      
      if (elements[(i + 1)] == NULL) {
        elements[i] = paramLong1;
        elements[(i + 1)] = paramLong2;
        break;
      }
      if (l1 > paramLong1)
      {
        long l2 = elements[i];
        long l3 = elements[(i + 1)];
        long l4 = elements[(i + 2)];
        
        elements[i] = paramLong1;
        elements[(i + 1)] = paramLong2;
        


        i += KEY_INCREMENT;
        while ((i < ARRAY_SIZE) && (elements[(i + 1)] != NULL)) {
          long l5 = elements[i];
          long l6 = elements[(i + 1)];
          long l7 = elements[(i + 2)];
          
          elements[i] = l2;
          elements[(i + 1)] = l3;
          elements[(i + 2)] = l4;
          
          l2 = l5;
          l3 = l6;
          l4 = l7;
          
          i += KEY_INCREMENT;
        }
        
        if (i >= ARRAY_SIZE) break;
        elements[i] = l2;
        elements[(i + 1)] = l3;
        elements[(i + 2)] = l4; break;
      }
    }
  }
  

  public long[] getElementsArray()
  {
    return elements;
  }
}