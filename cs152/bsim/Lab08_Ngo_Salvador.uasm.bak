|I have not discussed the BSim language code in my program with anyone other than my instructor in this course.
|I have not used BSim language code obtained from another student, or any unauthorized source, either modified or 
|unmodified.
|If any BSim language code or documentation used in my program was obtained from another source, 
|such as a text book or course notes, that has been clearly noted with a proper citation in the comments of my 
|program.

|| PROBLEM 1 ||

.include beta.uasm

LD(R31, X, R0) 
LD(R31, Y, R1) 

| a mod b = remainder
| remainder = dividend - quotient * divisor
.macro MOD(RA, RB, RC) {
DIV(RA, RB, RC) 
MUL(RC, RB, RC) 
SUB(RA, RC, RC) 
}

MOD(R0, R1, R2) 

. = 0x200
X: LONG(14)
Y: LONG(8) 
Z: LONG(R2)

|| PROBLEM 2 ||

.include beta.uasm

LD(N, R0) | STORE ARRAY SIZE TO R0. R0 IS THE ITERATOR. 
CMOVE(A, R1) | STORE A'S LOCATION ADDRESS TO R1. R1 IS THE ARRAY POINTER
MULC(R0, 12, R8) | MULTIPLY R7 WITH 12. RESULT PROVIDES SLOTS TO STORE ELEMENTS. STORE TO R9. 
ADD(R1, R8, R9) | ADD LOCATION WITH RESULT IN R9 AND STORE TO R10. RESULT PROVIDES STORAGE POINTER.

loop: 
	BF(R0, brk) | WHEN R0 REACHES 0, GO TO brk 
	LD(R1, 0, R2) | LOAD R1'S LOCATION TO R2
	ST(R2, 0x000, R9) | STORE R2 TO POINTER IN R10
	SUBC(R9, 4, R9) | DECREMENT STORE POINTER BY 4 
	ADDC(R1, 4, R1) | INCREMENT ARRAY POINTER BY 4
	SUBC(R0, 1, R0) | DECREMENT ITERATOR
	CALL(loop) | loop again

brk: 
	HALT() | break loop 

. = 0x200
N: LONG(5) 
A: LONG(3) 
LONG(5) 
LONG(12)
LONG(14)
LONG(1)

|| PROBLEM 3 ||

.include beta.uasm

LD(N, R0) | ITERATOR
ADDC(R2, 2, R2) | MODULO 2 CONSTANT
CMOVE(A, R1) | ARRAY POINTER


|MOD FUNCTION
.macro MOD(RA, RB, RC){
DIV(RA, RB, RC)
MUL(RC, RB, RC)
SUB(RA, RC, RC)
}

| ANY EVEN NUMBER IS ADDED TO R5
checkEven: 
	BF(R0, done) 
	LD(R1, 0, R3) 
	MOD(R3, R2, R4) 
	BT(R4, continue) |skip adding when remainder is odd
	ADD(R5, R3, R5)
	|iterator statementa
	continue: 
		ADDC(R1, 4, R1) 
		SUBC(R0, 1, R0) 
	CALL(checkEven)

|STORE R5
done: 
	ST(R5, 0x000, R1) 

. = 0x200
N: LONG(5) 
A: LONG(3) 
LONG(5) 
LONG(12)
LONG(14)
LONG(1)

|| PROBLEM 4 ||
| ONE TIME PAD ENCRYPTION - XOR THE BITS
| Z = X $ Y = X XOR Y (XOR EACH BIT) 
| WHERE Z IS THE CIPHERTEXT, X IS THE MESSAGE, AND Y IS THE KEY 

.include beta.uasm

ADDC(R0, 7, R0) | iterator for extendKey
CMOVE(K, R1) | load key (K) in R1
LD(R1, 0, R8) | store key in register R8
LD(R1, 0, R9) | store key in R9. R9 will contain extendKey
LD(M, R16) |load message (M) in R16

|extendKey extends key to 32 bits
extendKey: 
	BF(R0, encrypt) | when r = 0, call encrypt
	SHLC(R9, 4, R9) | shift R9 4 bits to the left
	ADD(R8, R9, R9) | add R8 and R9 to replicate the bit values to every byte
	SUBC(R0, 1, R0) | decrement iterator
	CALL(extendKey) | loop again

|encrypt xors the message to produce the ciphertext (encrypted message) 
encrypt: 
	XOR(R16, R9, R16) 
	ST(R16, 0x20C) |store after xor


| C = M $ K
. = 0x200
M: LONG(0b01011110101111110000101010100100)
K: LONG(0b1011)